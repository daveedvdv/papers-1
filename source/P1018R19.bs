<pre class='metadata'>
Title: C++ Language Evolution status
Shortname: P1018
Revision: 19
Audience: WG21, EWG
Status: P
Group: WG21
URL: http://wg21.link/P1018r19
!Source: <a href="https://github.com/jfbastien/papers/blob/master/source/P1018r19.bs">github.com/jfbastien/papers/blob/master/source/P1018r19.bs</a>
Editor: JF Bastien, Woven Planet, cxx@jfbastien.com
Date: 2022-11-15
Markup Shorthands: markdown yes
Toggle Diffs: no
No abstract: false
Abstract: This paper is a collection of items that the C++ Language Evolution group has worked on in the latest meeting, their status, and plans for the future.
</pre>

<style>
table, th, td { border: 2px solid grey; }
</style>

Executive summary {#summary}
=================

The Evolution Working Group did not meet in-person between the February 2020 meeting in Prague, until November 2022 in Kona. You will find EWG's pandemic activities in [[P1018r18]].

This paper summarizes all of the work that was performed in the November 2022 Kona meeting.

Work Performed {#work}
==============

This meeting was the first towards finalizing C++23, see [[P1000r4]] for the full schedule. In the ISO process, we received a variety of comments from different National Bodies. The full list is tracked as <a href="https://github.com/cplusplus/nbballot/issues?q=is%3Aissue+milestone%3A%22CD+C%2B%2B23%22+">GitHub issues</a>. EWG received 33 National Body comments. Of those, 16 were closed as duplicates, and 17 were reviewed with the following outcomes:

<ul>
  <li>5 Rejected: <a href="https://github.com/cplusplus/nbballot/issues/429">FR-027-006</a>, <a href="https://github.com/cplusplus/nbballot/issues/493">US 21-053</a>, <a href="https://github.com/cplusplus/nbballot/issues/485">US 14-043</a>, <a href="https://github.com/cplusplus/nbballot/issues/486">US 12-041</a>, <a href="https://github.com/cplusplus/nbballot/issues/425">FR-023-007</a></li>
  <li>9 Accepted &amp; Forwarded a resolution to CWG: <a href="https://github.com/cplusplus/nbballot/issues/428">FR-026-018</a>, <a href="https://github.com/cplusplus/nbballot/issues/431">GB-059</a>, <a href="https://github.com/cplusplus/nbballot/issues/451">GB-051</a>, <a href="https://github.com/cplusplus/nbballot/issues/488">US 16-045</a>, <a href="https://github.com/cplusplus/nbballot/issues/467">DE-046</a>, <a href="https://github.com/cplusplus/nbballot/issues/460">CA-065</a>, <a href="https://github.com/cplusplus/nbballot/issues/443">GB-048</a>, <a href="https://github.com/cplusplus/nbballot/issues/430">GB-055</a>, <a href="https://github.com/cplusplus/nbballot/issues/471">DE-038</a></li>
  <li>1 Forwarded to LEWG with EWG Blessing: <a href="https://github.com/cplusplus/nbballot/issues/457">GB-089</a></li>
  <li>2 Needs to come back to EWG (Will see in Telecons/next meeting): <a href="https://github.com/cplusplus/nbballot/issues/427">FR-025-017</a>, <a href="https://github.com/cplusplus/nbballot/issues/480">US 8-036</a></li>
</ul>

Separately from finalizing C++23, we’ve continued early work towards C++26 and later. We track outstanding proposals in GitHub as well, here are <a href="https://github.com/cplusplus/papers/issues?q=is%3Aissue+is%3Aopen+label%3Aewg+-label%3Aewgi+-label%3Aneeds-revision+-label%3Alewg+-label%3Alewgi+-label%3ATentativelyReady+-label%3AEWG-vote-on-me+sort%3Aupdated-desc+-label%3ASG16+">the ones for EWG which are ready to review</a>. EWG and its incubator EWGI started the week with 83 papers to review (some not for the first time), EWG therefore had to prioritize using a variety of criteria such as the C++ Direction Group’s recommendations in [[P2000r4]]. During the week forwarded the following papers to CWG for C++26:
<ul>
  <li>[[P1061R0]] Structured Bindings can introduce a Pack</li>
  <li>[[P2361R0]] Unevaluated string literals</li>
  <li>[[P2014R0]] aligned allocation of coroutine frames</li>
  <li>[[P0609R1]] Attributes for Structured Bindings</li>
  <li>[[P2558R0]] Add @, $, and ` to the basic character set</li>
  <li>[[P2621R0]] UB? In my Lexer?</li>
  <li>[[P2686R0]] Updated wording and implementation experience for P1481 (constexpr structured bindings)</li>
  <li>[[P1967R0]] #embed - a simple, scannable preprocessor-based resource acquisition method</li>
  <li>[[P2593R0]] Allowing static_assert(false): To be forwarded after the next meeting unless a better proposal comes up</li>
</ul>
This doesn’t mean that they will all be in C++26, they are only tentatively on track to be in C++26.

The following papers were reviewed and forwarded to LEWG, the library evolution group, meaning that either EWG sees no need for language input, or provided language input to the library group, or requests library input to further the language work:
<ul>
  <li>[[P2641R0]] Checking if a union alternative is active</li>
  <li>[[P2546R0]] Debugging Support</li>
  <li>[[P0876R5]] fiber_context - fibers without scheduler</li>
  <li>[[P2141R0]] Aggregates are named tuples</li>
</ul>

The following papers were reviewed and encouraged to come back with an update:
<ul>
  <li>[[P0901R2]] Size feedback in operator new</li>
  <li>[[P2677R0]] Reconsidering concepts in-place syntax</li>
  <li>Pattern Matching:</li>
  <ul>
    <li>[[P2211R0]] Exhaustiveness Checking for Pattern Matching</li>
    <li>[[P2169R0]] A Nice Placeholder With No Name</li>
    <li>[[P2392R2]] Pattern matching using is and as</li>
    <li>[[P2688R0]] Pattern Matching Discussion for Kona 2022</li>
    <li>[[P2561R1]] An error propagation operator</li>
    <li>[[P2656R0]] C++ Ecosystem International Standard</li>
  </ul>
  <li>Pointer Provenance</li>
  <ul>
    <li>[[P2188R0]] Zap the Zap: Pointers should just be bags of bits</li>
    <li>P2434R0 (not yet published) Nondeterministic pointer provenance</li>
  </ul>
  <li>[[P2547R0]] Language support for customisable functions</li>
  <li>[[P2632R0]] A plan for better template meta programming facilities in C++26</li>
  <li>[[P2671R0]] Syntax choices for generalized pack declaration and usage</li>
</ul>

The following papers were reviewed and had no consensus for further work:
<ul>
  <li>[[P2669R0]] Deprecate changing kind of names in class template specializations</li>
  <li>[[P2174R0]] Compound Literals</li>
  <li>[[P2381R0]] Pattern Matching with Exception Handling</li>
</ul>

CWG asked for EWG feedback on:
<ul>
  <li>[[CWG2463]] Conditions for trivially copyable classes, the conclusion was that a paper was needed to address the issue</li>
</ul>

The committee also tracks defects through various groups. EWG issues were tracked in [[P1018r18]], and will shortly move to GitHub. This week we reviewed EWG issues as follows:
<ul>
  <li>2 Marked Resolved</li>
  <li>1 Marked as “Needs a Paper”</li>
  <li>17 Closed as “Not A Defect”</li>
</ul>

EWG hosted an evening session on “the future of C++”. The results in a few weeks (once the committee discussed internally, based on the survey feedback that sent attendees). It was well attended with 100+ participants, and much frank discussion.

A session on [[P2676r0]] he Val object model was held, so that C++ committee members learn about the work David Abrahams is doing at Adobe on the Val language. We separately heard from <a href="https://www.youtube.com/watch?v=ELeZAKCN4tY">Herb Sutter on CppFront</a>. We also had good engagement from a few folks who have worked on the <a href="https://github.com/carbon-language/carbon-lang">Carbon programming language</a>. As this is the C++ committee, we also often talk about languages such as Rust, Circle, Zig and others.

<pre class=biblio>
{
    "P1018r18": {
        "href": "https://wg21.link/p1018r18",
        "title": "C++ Language Evolution status - pandemic edition - 2022/08-2022/011",
        "authors": ["JF Bastien"],
        "date": "2022-10-24"
    }
}
</pre>
