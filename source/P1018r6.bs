<pre class='metadata'>
Title: Language Evolution status after Prague 2020
Shortname: P1018
Revision: 6
Audience: WG21, EWG
Status: P
Group: WG21
URL: http://wg21.link/P1018r6
!Source: <a href="https://github.com/jfbastien/papers/blob/master/source/P1018r6.bs">github.com/jfbastien/papers/blob/master/source/P1018r6.bs</a>
Editor: JF Bastien, Apple, jfbastien@apple.com
Date: 2020-02-29
Markup Shorthands: markdown yes
Toggle Diffs: no
No abstract: false
Abstract: This paper is a collection of items that language Evolution has worked on in the latest C++ meeting, their status, and plans for the future.
</pre>

Executive summary {#summary}
=================

* Finalize ballot resolution for C++20, to address National Body comments in [[N4844]].
* Start work on features for C++23 and later.
* Joins session with LEWG on ABI, based on <a href="https://wg21.link/P1863R1">P1863R1</a>.


Paper of note {#note}
=============

* <a href="https://wg21.link/P1000R4">P1000R4</a> C++ IS schedule
* <a href="https://wg21.link/P0592R4">P0592R4</a> To boldly suggest an overall plan for C++23
* <a href="https://wg21.link/P1999R0">P1999R0</a> Process: 2Ã—-ðŸ‡¨ðŸ‡¿ evolutionary material via a Tentatively Ready status
* <a href="https://wg21.link/P2118R0">P2118R0</a> Documenting Core Undefined or Unspecified Behavior


Tentatively ready papers {#tentative}
========================

Following our process in <a href="https://wg21.link/P1999">P1999</a>, here are the papers that EWG considers tentatively ready for CWG. We'll take a brief look at the next meeting, and if nothing particular concerns anyone, send them to CWG.

* <a href="https://wg21.link/P1847R2">P1847R2</a> Make declaration order layout mandated 
* <a href="https://wg21.link/P2025R0">P2025R0</a> Guaranteed copy elision for named return objects
* <a href="https://wg21.link/P1949R2">P1949R2</a> C++ Identifier Syntax using Unicode Standard Annex 31

You can <a href="https://github.com/cplusplus/papers/labels/TentativelyReady">follow this list on GitHub</a>.


ABI discussion {#abi}
==============

We held a joint sessions with LEWG to discuss ABI, based on <a href="https://wg21.link/P1863R1">P1863R1</a>, The outcome of the discussion was as follows:

* <strong>To the best of our ability, we should promise users that we wonâ€™t break ABI, ever</strong><br>Wasn't contended: we disagree with this statement and might break ABI in the future.
* <strong>From now on, we should consider incremental ABI for every C++ release</strong><br>Received extremely positive support, with a small minority disagreeing strongly.
* <strong>We should consider a big ABI break for C++23</strong><br>Was extremely contended, with a few more people in favor than against. This was insufficient to call consensus.
* <strong>We should consider a big ABI break for C++SOMETHING</strong><br>Was positive enough to call consensus, but still had a quite substantial opposition including many disagreeing strongly. Were we to do a big ABI break we would need to work very hard on consensus building. Indeed, the number of people disagreeing strongly on a poll for a concrete change would block consensus.
* <strong>When we are unable to resolve a conflict between performance and ABI compatibility, we should prioritize performance</strong><br>Was still more positive, but also had a quite substantial opposition including many disagreeing strongly. Again, we should consider performance over ABI but work extremely hard towards consensus building when doing so.


National body comments {#nb}
======================

* <a href="https://wg21.link/P2003R0">P2003R0</a> Fixing Internal and External Linkage Entities in Header Units <a href="https://wg21.link/P2003/github">#740</a>
* <a href="https://wg21.link/P2014R0">P2014R0</a> Proposed resolution for US061/US062 - aligned allocation of coroutine frames <a href="https://wg21.link/P2014/github">#750</a>
* <a href="https://wg21.link/P1884R0">P1884R0</a> Private Module Partition: An Inconsistent Boundary <a href="https://wg21.link/P1884/github">#729</a>
* <a href="https://wg21.link/P2100R0">P2100R0</a> Keep unhandled_exception of a promise type mandatory - a response to US062 and FR066
* <a href="https://wg21.link/P2104R0">P2104R0</a> GB046 Allow caching of evaluations of concept specializations <a href="https://github.com/cplusplus/nbballot/issues/45">#45</a>


C++23 discussions {#cpp23}
=================

We discussed a few papers which could make it to C++23:

* <a href="https://wg21.link/P2085R0">P2085R0</a> Consistent defaulted comparisons
* <a href="https://wg21.link/P0592R4">P0592R4</a> To boldly suggest an overall plan for C++23
* <a href="https://wg21.link/P1999R0">P1999R0</a> Process proposal: double-check evolutionary material via a Tentatively Ready status
* <a href="https://wg21.link/P1468R3">P1468R3</a> Fixed-layout floating-point type aliases
* <a href="https://wg21.link/P1467R3">P1467R3</a> Extended floating-point types
* <a href="https://wg21.link/P1371R2">P1371R2</a> Pattern Matching
* <a href="https://wg21.link/P1000R4">P1000R4</a> C++ IS schedule
* <a href="https://wg21.link/P1726R2">P1726R2</a> Pointer lifetime-end zap
* <a href="https://wg21.link/P2092R0">P2092R0</a> Disambiguating Nested-Requirements
* <a href="https://wg21.link/P1040R5">P1040R5</a> std::embed
* <a href="https://wg21.link/P1677R2">P1677R2</a> Cancellation is not an Error
* <a href="https://wg21.link/P1401R2">P1401R2</a> Narrowing contextual conversions to bool
* <a href="https://wg21.link/P0876R10">P0876R10</a> fiber_context - fibers without scheduler
* <a href="https://wg21.link/P0847R4">P0847R4</a> Deducing this
* <a href="https://wg21.link/P2082R1">P2082R1</a> Fixing CTAD for aggregates
* <a href="https://wg21.link/P1774R3">P1774R3</a> Portable assumptions
* <a href="https://wg21.link/P2118R0">P2118R0</a> Documenting Core Undefined or Unspecified Behavior
* <a href="https://wg21.link/P0849R2">P0849R2</a> auto(x): decay-copy in the language
* <a href="https://wg21.link/P2036R0">P2036R0</a> Changing scope for lambda trailing-return-type
* <a href="https://wg21.link/P2071R0">P2071R0</a> Named universal character escapes
* <a href="https://wg21.link/P1900R0">P1900R0</a> Concepts-Adjacent Problems
* <a href="https://wg21.link/P1847R2">P1847R2</a> Make declaration order layout mandated
* <a href="https://wg21.link/P1393R0">P1393R0</a> A General Property Customization Mechanism
* <a href="https://wg21.link/P2026R0">P2026R0</a> A Constituent Study Group for Safety-Critical Applications
* <a href="https://wg21.link/P1938R0">P1938R0</a> if consteval
* <a href="https://wg21.link/P1955R0">P1955R0</a> Top Level Is Constant Evaluated
* <a href="https://wg21.link/P2041R0">P2041R0</a> Deleting variable templates
* <a href="https://wg21.link/P0870R2">P0870R2</a> A proposal for a type trait to detect narrowing conversions
* <a href="https://wg21.link/P2025R0">P2025R0</a> Guaranteed copy elision for named return objects
* <a href="https://wg21.link/P2013R0">P2013R0</a> Freestanding Language: Optional ::operator new
* <a href="https://wg21.link/P1949R2">P1949R2</a> C++ Identifier Syntax using Unicode Standard Annex 31

The following papers were scheduled for discussion, but authors requested to delay until the next meeting:

* <a href="https://wg21.link/P1967R1">P1967R1</a> #embed - a simple, scannable preprocessor-based resource acquisition method
* <a href="https://wg21.link/P1046R2">P1046R2</a> Automatically Generate More Operators
* <a href="https://wg21.link/P2049R0">P2049R0</a> Constraint refinement for special-cased functions

The following papers were scheduled for discussion, but were seen in SG7 Reflection who decided to table them for now:

* <a href="https://wg21.link/P1733R0">P1733R0</a> User-friendly and Evolution-friendly Reflection: A Compromise
* <a href="https://wg21.link/P2089R0">P2089R0</a> Function parameter constraints are fragile


Near-future EWG plans {#future}
=====================

We will continue to work on C++23, prioritizing according to <a href="https://wg21.link/P0592">P0592</a>.
